

import unittest
from waps_ies import waps_packet, waps_image
import datetime

class TestPacket(unittest.TestCase):

    def test_get_completeness_str(self):
        """ Create and test a uCAM init packet"""

        packet_data = b'@}\xab\x01\x00qa\xa4\xf1\xe2\x03\xbe\x02o\t\x7f\x03y\x08\x00\x05\xc4\x05\xc9\r\x16\x00\t\x03L\x0c\x9e\x08g\x00\x01\x00\x01\x00\x02\x00\x03\x02\x02`\x00\x00 \x00 \xff"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x00`\x00\x00\x02\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        init_packet = waps_packet.WapsPacket(datetime.datetime(2023, 3, 29, 14, 11, 54, 100000),
                                             datetime.datetime(2023, 3, 29, 14, 11, 54, 200000),
                                             packet_data)
        image = waps_image.WapsImage(init_packet)

        packet_data = bytearray(b'@}\xab\x01\x00\xd5\xeb\x90\xf1\xf5\x03\xb9\x02l\ts\x03t\x07\xfd\x04H\x05\xb8\r\x15\x00\x0b\x03N\x0c\xd1\x08\x0f\x00\x00\x00\x03\x00\x02\x00\x03\x03\x02`\x00\x00 \x00 \xff"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00B\x00\x00\x00\x00\xa4\x00\x00\xdd\xa0\x00\x0e\r/\x00\xd6\x080\x00\x00a\x10\x82\x08j\xa6\xb0\x9a\n\x89\x06\xfc$\x00\x00\x00\x00 \x00\x01\x00 \x00\x01\x04M\x00\x00\x00\x00\x8c\x99\x00\x05w~\x17\xcav|#\x9ev1\x00\x00u0vn:\xd6\x00\xd5v)\x00\x00\x00\x00\x00\x00\x00O\x00;\x12\xc0\x02\x00\x00\x01\x00\x80\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x80\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x01\x00N\x00:\x00\x07\x006\x00\x12\x00\xd2\x006\x00\x1b\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        data_packet1 = waps_packet.WapsPacket(datetime.datetime(2023, 3, 29, 14, 11, 54, 110000),
                                              datetime.datetime(2023, 3, 29, 14, 11, 54, 120000),
                                              packet_data)

        self.maxDiff = None
        self.assertEqual(image.get_completeness_str(), '0% (0/33)')

        image.packets = (data_packet1,)
        self.assertEqual(image.get_completeness_str(), '3% (1/33)')

if __name__ == '__main__':
    unittest.main()